// Async/Await l√† ES7 n√≥ d√πng ti·ªán l·ª£i h∆°n Promise c·ªßa ES6




//                              Async / Await l√† g√¨?
// Async / Await l√† m·ªôt t√≠nh nƒÉng c·ªßa JavaScript gi√∫p ch√∫ng ta l√†m vi·ªác v·ªõi c√°c h√†m b·∫•t ƒë·ªìng b·ªô theo c√°ch th√∫ v·ªã h∆°n v√† d·ªÖ hi·ªÉu h∆°n. 
// N√≥ ƒë∆∞·ª£c x√¢y d·ª±ng tr√™n Promises v√† t∆∞∆°ng th√≠ch v·ªõi t·∫•t c·∫£ c√°c Promise d·ª±a tr√™n API. Trong ƒë√≥:

//          => Async - khai b√°o m·ªôt h√†m b·∫•t ƒë·ªìng b·ªô (async function someName(){...}).

//          => T·ª± ƒë·ªông bi·∫øn ƒë·ªïi m·ªôt h√†m th√¥ng th∆∞·ªùng th√†nh m·ªôt Promise.
// Khi g·ªçi t·ªõi h√†m async n√≥ s·∫Ω x·ª≠ l√Ω m·ªçi th·ª© v√† ƒë∆∞·ª£c tr·∫£ v·ªÅ k·∫øt qu·∫£ trong h√†m c·ªßa n√≥.
//          => Async cho ph√©p s·ª≠ d·ª•ng Await.
//          => Await - t·∫°m d·ª´ng vi·ªác th·ª±c hi·ªán c√°c h√†m async. (Var result = await someAsyncCall ()üòâ.

// Khi ƒë∆∞·ª£c ƒë·∫∑t tr∆∞·ªõc m·ªôt Promise, n√≥ s·∫Ω ƒë·ª£i cho ƒë·∫øn khi Promise k·∫øt th√∫c v√† tr·∫£ v·ªÅ k·∫øt qu·∫£.
// Await ch·ªâ l√†m vi·ªác v·ªõi Promises, n√≥ kh√¥ng ho·∫°t ƒë·ªông v·ªõi callbacks.
// Await ch·ªâ c√≥ th·ªÉ ƒë∆∞·ª£c s·ª≠ d·ª•ng b√™n trong c√°c function async.


//  D∆∞·ªõi ƒë√¢y ch√∫ng ta s·∫Ω vi·∫øt c√πng m·ªôt ch·ª©c nƒÉng v·ªõi 2 c√°ch kh√°c nhau: c√°ch th·ª© 1 v·ªõi Promises, v√† c√°ch th·ª© 2 v·ªõi Async / Await
// c√°ch 1: 
            function getJSON() {

                // To make the function blocking we manually create a Promise.
                return new Promise( function(resolve) {
                    axios.get('https://tutorialzine.com/misc/files/example.json')
                        .then( function(json) {

                            // The data from the request is available in a .then block
                            // We return the result using resolve.
                            resolve(json);
                        });
                });
            }
// c√°ch 2:
// Async/Await approach

            // The async keyword will automatically create a new Promise and return it.
            async function getJSONAsync() {

                // The await keyword saves us from having to write a .then() block.
                let json = await axios.get('https://tutorialzine.com/misc/files/example.json');

                // The result of the GET request is available in the json variable.
                // We return it just like in a regular synchronous function.
                return json;
}